/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("AJE", [], factory);
	else if(typeof exports === 'object')
		exports["AJE"] = factory();
	else
		root["AJE"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/Editor.js":
/*!**************************!*\
  !*** ./src/js/Editor.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _templates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./templates.js */ \"./src/js/templates.js\");\n/* harmony import */ var _feedback_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./feedback.js */ \"./src/js/feedback.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers.js */ \"./src/js/helpers.js\");\n/* harmony import */ var _block_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./block.js */ \"./src/js/block.js\");\n/* harmony import */ var _inline_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inline.js */ \"./src/js/inline.js\");\n/* harmony import */ var _icons_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./icons.js */ \"./src/js/icons.js\");\n/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./buffer.js */ \"./src/js/buffer.js\");\n\n\n;\n\n\n\n\n\n\n\nclass Editor {\n\n    // -----------------------------------------------------------------------------\n    // @section Initialisation\n    // -----------------------------------------------------------------------------\n\n    constructor( target, content, options ){\n        // Initialise options & toolbar\n        this.options = this.initOptions(options)\n        this.initToolbar()\n        // Initialise the editor\n        target.innerHTML = _templates_js__WEBPACK_IMPORTED_MODULE_0__.editor(this.toolbar, this.options)\n        this.editorNode = target.querySelector('.editor-body')\n        this.toolbarNode = target.querySelector('.editor-toolbar')\n        // Reset global range\n        this.range = false\n        // Add the content\n        const clean = this.getCleanData(content)\n        this.editorNode.innerHTML = clean\n        // Events\n        this.listenForMouseUpEvents()\n        this.listenForKeydownEvents()\n        this.listenForPasteEvents()\n        this.listenForKeyupEvents()\n        this.listenForToolbarButtonClicks()\n        this.listenForCustomEvents()\n        // Initialise paste buffer\n        setTimeout( () => this.buffer = new _buffer_js__WEBPACK_IMPORTED_MODULE_6__.default(this.options.bufferSize, this.editorNode), 100)\n    }\n\n    initOptions(options){   \n        const elements = ['H1','H2','P', 'OL','UL', 'B', 'I', 'U']\n        const plugins = []\n        const headingNumbers = 'off'\n        const bufferSize = 10     \n        if ( options ){\n            options.elements = options.elements !== undefined ? options.elements : elements\n            options.plugins = options.plugins !== undefined ? options.plugins : plugins\n            options.headingNumbers = options.headingNumbers !== undefined ? options.headingNumbers : headingNumbers\n            options.bufferSize = options.bufferSize !== undefined ? Math.max(parseInt(options.bufferSize),bufferSize) : bufferSize\n        } else {\n            options = {\n                elements,\n                plugins,\n                headingNumbers,\n                bufferSize\n            }\n        }\n        // Make sure all upper case\n        for( let i=0; i<options.elements.length; i++){\n            options.elements[i] = options.elements[i].toUpperCase()\n        }\n        console.log('options',options)\n        return options\n    }\n\n    initToolbar(){\n        // Default toolbar\n        const toolbar = [\n            {type:'block',  tag:'H1',    label:'Heading 1',      icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.h1},\n            {type:'block',  tag:'H2',    label:'Heading 2',      icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.h2},\n            {type:'block',  tag:'P',     label:'Paragraph',      icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.p},\n            {type:'list',   tag:'OL',    label:'Ordered list',   icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.ol},\n            {type:'list',   tag:'UL',    label:'Unordered list', icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.ul},\n            {type:'inline', tag:'B',     label:'Bold',           icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.b},\n            {type:'inline', tag:'I',     label:'Italic',         icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.i},\n            {type:'inline', tag:'U',     label:'Underline',      icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.u},\n            {type:'inline', tag:'CLEAR', label:'Clear',          icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.clear},\n            {type:'edit',   tag:'UNDO',  label:'Undo',           icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.undo},\n            {type:'edit',   tag:'REDO',  label:'Redo',           icon:_icons_js__WEBPACK_IMPORTED_MODULE_5__.redo},\n        ]\n        this.toolbar = toolbar.filter( item => options.elements.includes(item.tag))\n        this.options.plugins.forEach( plugin => {\n            plugin.button.type = 'custom'\n            this.toolbar.push(plugin.button)\n        })\n        console.log('toolbar',this.toolbar)\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Mouse up events\n    // -----------------------------------------------------------------------------\n    listenForMouseUpEvents(){\n        this.editorNode.addEventListener('mouseup', () => this.handleMouseUp(true))\n        // Use timeout on blur so buttons still active when first clicked from editor\n        this.editorNode.addEventListener('blur', () => {\n            setTimeout( ()=>this.handleMouseUp(false), 500)\n        })\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Toolbar button events\n    // -----------------------------------------------------------------------------\n    \n    listenForToolbarButtonClicks(){\n        this.toolbar.forEach( button => {\n            button.element = this.toolbarNode.querySelector(`#${button.tag}`)\n            button.element.disabled = true\n            if ( \"disable\" in button ){\n                button.disable(button.element)\n            }\n            button.element.addEventListener('click', event => {\n                // @todo This does not work for custom buttons where bootstrap gets in first\n                //       Therefore need to add relevant attributes on selection taking place\n                if ( this.range === false ){\n                    event.preventDefault()\n                    return\n                }\n                this.clickToolbarButton(event.currentTarget)\n            })\n        })\n    }\n\n    clickToolbarButton(element){\n        const clicked = this.toolbar.find( button => button.tag==element.id )\n        if ( clicked.type == 'block' ){\n            _block_js__WEBPACK_IMPORTED_MODULE_3__.click(clicked, this.range, this.editorNode )\n            this.updateEventHandlers()\n        } else if ( clicked.type == 'list' ){\n            _block_js__WEBPACK_IMPORTED_MODULE_3__.click(clicked, this.range, this.editorNode )\n            this.updateEventHandlers()\n        } else if ( clicked.type == 'inline' ){\n            _inline_js__WEBPACK_IMPORTED_MODULE_4__.click(clicked, this.range, this.editorNode )\n            this.updateEventHandlers()\n        } else if ( clicked.type == 'edit' ){\n            if ( this.buffer.click(clicked) ){\n                this.updateEventHandlers()\n            }\n        } else if ( clicked.type == 'custom' ){\n            console.log('clicked custom button', clicked.id,'with range',this.range)\n            clicked.click(this.range)\n        }\n        this.range == false\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Keydown events\n    // -----------------------------------------------------------------------------\n    \n    listenForKeydownEvents(){\n        this.editorNode.addEventListener('keydown', event => {\n            console.log('control key?',event.ctrlKey)\n            console.log('key',event.key)\n            // Custom panel shown - ignore key entry?\n            if ( document.querySelector('.custom-panel') != null ){\n                event.preventDefault()\n            // Override normal browser enter key action\n            } else if ( event.key == 'Enter' ) {\n                if ( this.handleEnter() ){\n                    event.preventDefault()\n                }\n            // Prevent deletion of customised blocks\n            } else if ( event.key == 'Backspace' || event.key == 'Delete' || \n                        (event.ctrlKey && event.key == 'd') ){\n                if ( this.handleDelete(event.key) ){\n                    event.preventDefault()\n                }\n            // Capture undo/redo events\n            } else if ( (event.ctrlKey || event.metaKey) && event.key == 'z' ){\n                event.preventDefault()\n                // Redo\n                if ( event.shiftKey  ){\n                    if ( this.buffer.redo() ){\n                        this.updateEventHandlers()\n                    }\n                // Undo\n                } else {\n                    if ( this.buffer.undo() ){\n                        this.updateEventHandlers()\n                    }\n                }\n            }\n        })\n    }\n\n    handleEnter(){\n        const range = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getRange()\n        if ( range === false ){\n            return\n        }\n        const custom = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.isCustom(range.blockParent) \n        const endNormal = range.endContainer.textContent.trim().length == range.endOffset\n        let handled = false\n        if ( custom || endNormal ) {\n            let p = document.createElement('P')\n            p.innerText = '\\n'\n            p = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.insertAfter( p, range.blockParent )\n            _helpers_js__WEBPACK_IMPORTED_MODULE_2__.setCursor( p, 0 )\n            handled = true\n        }\n        if ( custom ){\n            this.highlightCustomNode(false)\n        }\n        return handled\n    }\n\n    /**\n     * \n     * @returns boolean true if need to prevent default action\n     */\n    handleDelete(key){\n        if ( key == 'd' ){\n            key = 'Delete'\n        }\n        const range = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getRange()\n        console.log('range=',range)\n        if ( range ){\n            const example = this.toolbar.find(button => button.type==='custom')\n            const title = 'Information'\n            const message = `To delete a custom element (such as an ${example.tag}) you need to edit it by clicking it and choosing Delete.`\n            // Single selection\n            if ( range.collapsed ){\n                console.log('Single selection')\n                console.log('range length', range.endContainer.textContent.trim().length)\n                console.log('range endOffset', range.endOffset)\n                // Check for back spacing from a single selection point\n                if ( key == 'Backspace' && range.startOffset == 0 ){\n                    // Back spacing into a non-editable block?\n                    const previous = range.blockParent.previousElementSibling\n                    if ( previous && previous.innerHTML.includes('contenteditable=\"false\"') ){\n                        _feedback_js__WEBPACK_IMPORTED_MODULE_1__.show(title, message)\n                        return true\n                    }\n                // Forward delete in a none-editable block?\n                } else if ( key == 'Delete' && range.endContainer.textContent.trim().length == range.endOffset ){\n                    console.log('Deleting from end container')\n                    const next = range.endContainer.nextElementSibling\n                    console.log('next',next)\n                    if ( next && next.getAttribute(\"contenteditable\") == 'false' ){\n                        _feedback_js__WEBPACK_IMPORTED_MODULE_1__.show(title, message)\n                        return true\n                    }\n                }\n            // Back spacing or deleting in a multiple selection\n            } else {\n                // Loop from start container to end container checking for a non-editable block\n                let parent = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getParentBlockNode(range.startContainer)\n                const endParent = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getParentBlockNode(range.endContainer)\n                while ( parent !== endParent ){\n                    if ( parent.innerHTML.includes('contenteditable=\"false\"') ){\n                        _feedback_js__WEBPACK_IMPORTED_MODULE_1__.show(title, message)\n                        return true\n                    }\n                    parent = parent.nextElementSibling\n                }\n            }\n        }\n        return false\n    }\n\n    // -----------------------------------------------------------------------------\n    // @section Keyup events\n    // -----------------------------------------------------------------------------\n    \n    listenForKeyupEvents(){\n        this.handleKeyup = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.debounce(this.handleKeyupDelayed,500)\n        this.editorNode.addEventListener( 'keyup', () => this.handleKeyup(this) )\n    }\n\n    handleKeyupDelayed(...args){\n        //console.log('Updating buffer with arg[0]',args[0])\n        const editor = args[0]\n        editor.buffer.update()\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Custom events\n    // -----------------------------------------------------------------------------\n    \n    listenForCustomEvents(){\n        // Do any custom setup required\n        this.toolbar.forEach( button => {\n            if ( button.type === 'custom' ){\n                // if ( \"setup\" in button ){\n                //     button.setup(this.editorNode, true)\n                // }\n                if ( \"shortcut\" in button && \"click\" in button){\n                    this.editorNode.addEventListener('keydown', event =>{\n                        if ( event.key === button.shortcut ){\n                            // Prevent default so key not echo'd to the screen\n                            event.preventDefault()\n                            // Stop propagation to prevent other event handlers responding\n                            event.stopPropagation()\n                            // Trigger the dialogue\n                            button.click(this.range)\n                        }\n                    })\n                }\n            }\n        })\n    }\n\n    updateEventHandlers(){\n        this.toolbar.forEach( button => {\n            if ( 'addEventHandlers' in button ){\n                button.addEventHandlers(this.editorNode)\n            }\n        })\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Paste events\n    // -----------------------------------------------------------------------------\n    \n    listenForPasteEvents(){\n        const events = ['cut', 'copy','paste']\n        events.forEach( evt =>\n            this.editorNode.addEventListener(evt, event=>{\n                if ( this.handleCutCopyPaste() ){\n                    event.preventDefault()\n                }\n                // Update buffer\n                setTimeout( ()=>this.handleKeyup(this), 1)\n            })\n        )\n    }\n\n    handleCutCopyPaste(){\n        console.log('Detected cut-copy-paste event')\n        const range = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getRange()\n        // Ensure have a range that is not collapsed\n        if ( range==false || range.collapsed ){\n            return false\n        }\n        // Loop from start container to end container checking for a non-editable block\n        let parent = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getParentBlockNode(range.startContainer)\n        const endParent = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getParentBlockNode(range.endContainer)\n        while ( parent !== endParent ){\n            if ( parent.innerHTML.includes('contenteditable=\"false\"') ){\n                const example = this.toolbar.find(button => button.type==='custom')\n                const title = 'Information'\n                const message = `Cut, copy and paste (of/over) selections with custom elements (such as ${example.tag}s) is not supported. Please modify your selection and try again.`\n                _feedback_js__WEBPACK_IMPORTED_MODULE_1__.show(title, message)\n                return true\n            }\n            parent = parent.nextElementSibling\n        }\n        return false\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Mouseup events\n    // -----------------------------------------------------------------------------\n    \n    handleMouseUp(focus){\n        console.log('Handle mouse up with focus = ', focus)\n        this.range = false\n        if ( focus ){\n            this.range = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.getRange()\n        }\n        let formats\n        if ( this.range !== false ){\n            // If enter cursor in an empty editor then make this a paragraph\n            // rather than raw text\n            if ( this.range.blockParent == this.editorNode && this.editorNode.innerText == ''){\n                this.insertParagraph()\n            }\n            // Highlight custom blocks\n            if ( _helpers_js__WEBPACK_IMPORTED_MODULE_2__.isCustom(this.range.blockParent) ){\n                this.highlightCustomNode(this.range.blockParent)\n            }\n            console.log('handleMouseUp range=',this.range)\n            formats = _helpers_js__WEBPACK_IMPORTED_MODULE_2__.appliedFormats(this.range.startContainer, this.editorNode, this.range.rootNode, '')\n            console.log('Applied formats',formats)\n        }\n        this.toolbar.forEach( button => {\n            const element = button.element\n            // Ignore none ranges\n            if ( this.range === false ){\n                element.disabled = true\n            } else {\n                element.disabled = false\n                switch (button.type){\n                    case 'block':\n                        formats.push(this.range.blockParent.tagName)\n                    case 'list':\n                        element.removeAttribute('disabled')\n                        break\n                    case 'inline':\n                        if ( this.range.blockParent == this.editorNode ){\n                            console.log('setting element to be disabled', element.title)\n                            element.disabled = true\n                        } else {\n                            element.removeAttribute('disabled')\n                        }\n                        break\n                    case 'custom':\n                        element.removeAttribute('disabled')\n                        break\n                }\n                // Check whether selection means button should be shown as active or not\n                if ( formats.includes(button.tag) ){\n                    element.classList.add('active')\n                    element.setAttribute('data-active',true)\n                    element.setAttribute('aria-pressed','true')\n                } else {\n                    element.classList.remove('active')\n                    element.removeAttribute('data-active')\n                    element.removeAttribute('aria-pressed')\n                }\n                if ( element.disabled ){\n                    console.log('setting element to be inactive', element.title)\n                } else {\n                    console.log('setting element to be active', element.title)\n                }\n            }\n        })\n    }\n\n    insertParagraph(){\n        let p = document.createElement('P')\n        // Create a placeholder to ensure set cursor works\n        p.innerText = '\\n'\n        p = this.editorNode.appendChild(p)\n        _helpers_js__WEBPACK_IMPORTED_MODULE_2__.setCursor( p, 0)\n    }\n\n\n    // -----------------------------------------------------------------------------\n    // @section Other methods\n    // -----------------------------------------------------------------------------\n    \n    getCleanData(content){\n        let node\n        if ( content !== undefined ){\n            node = document.createElement('div')\n            node.innerHTML = content\n        } else {\n            node = this.editorNode.cloneNode(true)\n        }\n        const customButtons = this.toolbar.filter( button => button.type==='custom')\n        _helpers_js__WEBPACK_IMPORTED_MODULE_2__.cleanForSaving(node, customButtons)\n        return node.innerHTML\n    }\n \n    highlightCustomNode(node){\n        const customs = this.editorNode.querySelectorAll('[contenteditable=false]')\n        customs.forEach(custom=>custom.classList.remove('selected'))\n        if ( node ){\n            node.classList.add('selected')\n        }\n    }\n\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Editor);\n\n\n//# sourceURL=webpack://AJE/./src/js/Editor.js?");

/***/ }),

/***/ "./src/js/ModalConfirm.js":
/*!********************************!*\
  !*** ./src/js/ModalConfirm.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ModalConfirm)\n/* harmony export */ });\n\n\nclass ModalConfirm {\n\n    constructor(){\n        this.panel = null\n    }\n\n    form(title,message){\n        return `\n            <div class=\"custom-modal-container\">\n                <div class=\"header\">\n                    <h5 class=\"custom-modal-title\">${title}</h5>\n                </div>\n                <div class=\"custom-modal-message\">${message}</div>\n                <div class=\"custom-modal-buttons\">\n                    <button type=\"button\" class=\"cancel\">No - stay here</button>\n                    <button type=\"button\" class=\"confirm\">Yes - lose changes</button>\n                </div>\n            </div>`\n    }\n\n    hide(){\n        this.panel.classList.remove('show')\n        setTimeout( ()=>this.delayedRemove(), 500 )\n    }\n\n    delayedRemove(){\n        this.panel.remove()\n        this.panel = null\n    }\n\n    delayedShow(){\n        this.panel.classList.add('show')\n    }\n\n    show( title, message ){\n        this.panel = document.createElement('DIV')\n        this.panel.classList.add('modal-confirm')\n        this.panel.innerHTML = this.form(title,message)\n        this.panel.querySelector('button.cancel').addEventListener('click', event => {\n            event.preventPropagation()\n            this.hide()\n        })\n        document.querySelector('body').appendChild(this.panel)\n        // Invoke with arrow function, otherwise this will be the current window\n        setTimeout( () => this.delayedShow(), 10 )\n        return this.panel.querySelector('button.confirm')\n    }\n}\n\n//# sourceURL=webpack://AJE/./src/js/ModalConfirm.js?");

/***/ }),

/***/ "./src/js/block.js":
/*!*************************!*\
  !*** ./src/js/block.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"click\": () => (/* binding */ click)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./src/js/helpers.js\");\n/* harmony import */ var _phase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./phase.js */ \"./src/js/phase.js\");\n\n\n\nlet editorNode\nlet formatType = ''\nlet formatAction = ''\nlet newFormat = ''\nlet previousFormats = []\nlet lastNodeAdded = false\nlet fragmentNode\n\nfunction getListAndBlockFormats( node, formats ){\n    // Always set old formats to the original\n    const oldFormats = [...formats.oldFormats, node.tagName]\n    let newFormats = []\n    // Pre and post phases\n    if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.pre() || _phase_js__WEBPACK_IMPORTED_MODULE_1__.post() ){\n        // console.log(`1. Pushing ${node.tagName} to formats`)\n        newFormats = [...formats.newFormats, node.tagName]\n        return {newFormats,oldFormats}\n    }\n    // During phase\n    //\n    // New block formatting (not list)\n    if ( formatType == 'block' ){\n        // console.log(`Format type = ${this.formatType}`)\n        // console.log(`2. new block format ${this.newFormat}`)\n        newFormats = [ newFormat ]\n        return {newFormats,oldFormats}\n    }\n    // New list formatting\n    if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.first() ){\n\n        // console.log(`3. First node with new list format ${newFormat}`)\n        // Reformatting a list item?\n        if ( node.tagName == 'LI' ){\n            // console.log('3.1 Processing LI')\n            const parentListContainer = node.parentNode\n            // First in list - in which case modify list type\n            if ( parentListContainer.firstElementChild == node ){\n                // console.log( '3.1.1 First item in a list - replace existing list')\n                newFormats.pop()\n                newFormats.push(newFormat)\n                newFormats.push('LI')\n                // console.log('3.1.2 new list formats', formats.newFormats.join(' '))\n            // Else create a new indented list\n            } else {\n                // console.log( '3.1.3 Subsequent item in a list - indent a new list')\n                newFormats.push('LI')\n                newFormats.push(newFormat)\n                newFormats.push('LI')\n                // console.log('3.1.4 new list formats', formats.newFormats.join(' '))\n            }\n        // This is a different block node (e. H1, P) or a list container node - therefore start a new list\n        } else {\n            // console.log( 'Converting a block node')\n            newFormats.push(newFormat)\n            newFormats.push('LI')\n            // console.log('3.2 new list formats', formats.newFormats.join(' '))\n        }\n        return {newFormats,oldFormats}\n    }\n    // During but not first node phase - reuse previously define list formats\n    newFormats = previousFormats.slice()\n    // console.log(`4. Reusing initial list formatting ${formats.newFormats.join(' ')}`)\n    return {newFormats,oldFormats}\n}\n    \n// @todo Could go into Helpers\nfunction getBlockHTML(node){\n    let html = ''\n    // Extract all text, inline formats and protected node content from the node\n    node.childNodes.forEach( child => {\n        // Plain text node\n        if ( child.nodeType === 3 ) {\n            let text = child.textContent\n            // Trim text nodes with CR's\n            if ( text.includes('\\n') ){\n                text = text.trim()\n            }\n            html += text\n        // Inline or custom node\n        } else if ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInline(child) || _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isCustom(child) ){\n            html += child.outerHTML \n        }\n    })\n    return html\n}\n    \nfunction saveBlockContent( node, formats ){\n    let n\n    let target = fragmentNode\n    let html = getBlockHTML(node)\n    let currentFormats = []\n    if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.during() ){\n        currentFormats = formats.newFormats\n    } else {\n        currentFormats = formats.oldFormats\n    }\n    let lastFormat = currentFormats.slice(-1)[0]\n    // console.log('html',html)\n    // Don't include what? @todo rest of comment!\n    if ( html == '' && node.innerHTML.includes('<') ){\n        return\n    }\n    // First time - apply all formats\n    if ( previousFormats.length == 0 ){\n        // console.log('0. Original target',target.outerHTML)\n        currentFormats.forEach( format => {\n            n = document.createElement( format )\n            target = target.appendChild( n )\n            console.log('1. First content - moving target to',target.outerHTML)\n        })\n    // New tree larger and the previous formats are a subset?\n    // Compare formatting and add to appropriate end of tree\n    } else if ( currentFormats.length > previousFormats.length ){\n        // console.log('2. Current formats longer than previous formats')\n        if ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.arraySubset( previousFormats, currentFormats ) ){\n            // console.log('2.1 Current formats are a superset of previous formats')\n            for( let i=0; i<previousFormats.length; i++){\n                target = target.lastElementChild\n                console.log('2.2 New formats superset - moving target to',target.outerHTML)\n            }\n            for( let i=previousFormats.length; i < currentFormats.length; i++ ){\n                n = document.createElement( currentFormats[i] )\n                target = target.appendChild( n )\n                console.log('2.3 New formats superset - moving target to',target.outerHTML)\n            }\n        }\n    // Formatting is the same as previously\n    } else if ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.arraysEqual(currentFormats,previousFormats) ){\n        if ( lastNodeAdded && lastNodeAdded != fragmentNode ){\n            target = lastNodeAdded.parentNode\n        }\n        n = document.createElement( lastFormat )\n        target = target.appendChild( n )\n        // console.log('3. Formats equal - moving target to',target.outerHTML)\n    }\n    // New formatting smaller or different - find where in tree to append\n    if ( target == fragmentNode ){\n        // console.log('4. New formatting smaller or different')\n        let startIndex = 0\n        currentFormats.forEach( (format,index) => {\n            if ( format == previousFormats[index] ){\n                // Exclude the last format if it is an LI as we need \n                // to add the LI to the previous list parent\n                if ( (index==(currentFormats.length-1) && format=='LI') == false ){\n                    target = target.lastElementChild\n                    // console.log('4.1 Move target node to', target.outerHTML)\n                    startIndex ++\n                }\n            }\n        })\n        for( let i=startIndex; i<currentFormats.length; i++ ){\n            n = document.createElement( currentFormats[i] )\n            target = target.appendChild( n )\n            // console.log('4.2 Starting new formats - moving target to',target.outerHTML)\n        }\n    }\n    lastNodeAdded = target\n    previousFormats = currentFormats.slice()\n    // Add the content\n    if ( html != '' ){\n        target.innerHTML = html\n        // console.log('target with new content', target.outerHTML)\n        // console.log('fragmentNode',fragmentNode.innerHTML)\n    }\n}\n    \nfunction parseListsAndBlocks( node, formats ){\n    // console.log( `%cparseListsAndBlocks ${node.tagName}`,'background:green;color:white;padding:0.5rem')\n    // console.log( `HTML [${node.innerHTML.trim()}]`)\n    // console.log( `node formats on entry`,formats.oldFormats)\n    // Define the formats for this node only\n    let nodeFormats = {\n        oldFormats:[],\n        newFormats:[]\n    } \n    if ( node != editorNode ){\n        _phase_js__WEBPACK_IMPORTED_MODULE_1__.set( node )\n        // Get the old and new formats\n        //nodeFormats = { ... getListAndBlockFormats( node, {...formats} ) }\n        nodeFormats = getListAndBlockFormats( node, formats )\n        // console.log( `old node formats`,nodeFormats.oldFormats)\n        // console.log( `new node formats`,nodeFormats.newFormats)\n        // Save content of text nodes and protected nodes\n        // saveBlockContent( node, {...nodeFormats} )\n        saveBlockContent( node, nodeFormats )\n    }\n    if ( node.childNodes.length == 0 ){\n        //console.log('Finished parsing this branch')\n        return\n    }\n    node.childNodes.forEach( child => {\n        if ( child.nodeType !== 3 &&\n                _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInline(child) == false &&\n                _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isCustom(child) == false ){\n            // console.log(`Moving to child[${children}] ${child.tagName}`)\n            // parseListsAndBlocks( child, {...odeFormats}  ) \n            parseListsAndBlocks( child, nodeFormats  ) \n        }\n    })\n    // console.log(`Finished this branch - processed ${children} children`)\n}\n\n\nconst click = function( button, range, editor ){\n    // Initialisation\n    editorNode = editor\n    formatType = button.type\n    formatAction = 'apply'\n    if ( button.tag == 'CLEAR' || button.element.getAttribute('data-active') ){\n        formatAction = 'remove'\n    }\n    // console.log('Format action', formatAction)\n    newFormat = button.tag\n    if ( button.type == 'block' && formatAction == 'remove' ){\n        newFormat = 'P'\n    }\n    previousFormats = []\n    lastNodeAdded = false\n    range.rootNode = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getTopParentNode( range.rootNode, editorNode )\n    const firstParentNode = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getTopParentNode( range.startContainer, editorNode  )\n    const endParentNode = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getTopParentNode( range.endContainer, editorNode  )\n    // Init phase for block formatting\n    _phase_js__WEBPACK_IMPORTED_MODULE_1__.init(range, true)\n    // console.log(`%creFormatBlock with new format ${button.tag}`,'background-color:red;color:white;padding:0.5rem')\n    //\n    // Just parse the root node if the start and end belong to the same parent\n    if ( firstParentNode == endParentNode ){\n        fragmentNode = document.createElement('DIV')\n        parseListsAndBlocks( range.rootNode, {oldFormats:[], newFormats:[]} )\n        // console.log( 'fragment', fragmentNode.innerHTML)\n        if ( range.rootNode == editorNode ){\n            range.rootNode.innerHTML = fragmentNode.innerHTML\n        } else {\n            range.rootNode.outerHTML = fragmentNode.innerHTML\n        }\n    } else {\n        let startNodeFound = false\n        let endNodeFound = false\n        fragmentNode = document.createElement('DIV')\n        range.rootNode.childNodes.forEach( node => {\n            if ( node.nodeType === 3 ){\n                return\n            }\n            if ( node == firstParentNode ){\n                startNodeFound = true\n            } \n            if ( startNodeFound && endNodeFound==false ) {\n                // console.log( `%cparse top level node ${node.tagName}`,'background:orange;color:white;padding:0.5rem')\n                // Check for block (as opposed to list formatting)\n                if ( formatType == 'block' ){\n                    previousFormats = []\n                    lastNodeAdded = false\n                    fragmentNode = document.createElement('DIV')\n                }\n                parseListsAndBlocks( node, {oldFormats:[], newFormats:[]} )\n                if ( button.type == 'block' ){\n                    // console.log( 'fragment', this.fragmentNode.innerHTML)\n                    node.outerHTML = fragmentNode.innerHTML   \n                } else {\n                    node.setAttribute('data-remove',true)\n                }\n            }\n            if ( node == endParentNode ){\n                endNodeFound = true \n                if ( button.type == 'list' ){\n                    // console.log( 'fragment', this.fragmentNode.innerHTML)\n                    node.outerHTML = fragmentNode.innerHTML\n                }\n                let removeNodes = editorNode.querySelectorAll('[data-remove=true]')\n                removeNodes.forEach( removeNode => removeNode.remove() )\n            }\n        })\n    }\n}\n\n//# sourceURL=webpack://AJE/./src/js/block.js?");

/***/ }),

/***/ "./src/js/buffer.js":
/*!**************************!*\
  !*** ./src/js/buffer.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Buffer)\n/* harmony export */ });\nclass Buffer {\n\n    constructor( size, target ){\n        this.size = size\n        this.bufferIndex = 0\n        this.target = target\n        this.buffer = [this.target.innerHTML]\n    }\n\n    update(){\n        if ( this.buffer.length > this.size ){\n            // Remove first element\n            this.buffer.shift()\n        }\n        // Check buffer index in case need to reset buffer when the user had\n        // undone and then made new changes\n        if ( (this.bufferIndex + 1) < this.buffer.length ){\n            const items = this.buffer.length - (this.bufferIndex + 1)\n            for( let i=0; i<items; i++){\n                this.buffer.pop()\n            }\n        }\n        // Add the new one\n        this.buffer.push(this.target.innerHTML)\n        this.bufferIndex = this.buffer.length - 1\n        console.log('buffer', this.buffer)\n    }\n\n    undo(){\n        console.log('handle undo with buffer index', this.bufferIndex)\n        if ( this.bufferIndex > 0 ){\n            this.bufferIndex --\n            this.target.innerHTML = this.buffer[this.bufferIndex]\n            return true\n        }\n        return false\n    }\n\n    redo(){\n        console.log('handle redo with buffer index', this.bufferIndex)\n        if ( this.bufferIndex+1 < this.buffer.length ){\n            this.bufferIndex ++\n            this.target.innerHTML = this.buffer[this.bufferIndex]\n            return true\n        }\n        return false\n    }\n\n    click( button ){\n        console.log('Handling edit')\n        switch (button.id ){\n            case 'b-undo':\n                return this.undo()\n            case 'b-redo':\n                return this.redo()\n        }\n        return false\n    }\n}\n\n//# sourceURL=webpack://AJE/./src/js/buffer.js?");

/***/ }),

/***/ "./src/js/feedback.js":
/*!****************************!*\
  !*** ./src/js/feedback.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"show\": () => (/* binding */ show)\n/* harmony export */ });\nfunction remove(){\n    const panel = document.querySelector('.custom-panel').remove()\n}\n\nfunction hide(){\n    const form = document.querySelector('.custom-form').classList.remove('show')\n}\n\nfunction delayed(){\n    const form = document.querySelector('.custom-form')\n    form.classList.add('show')\n    form.querySelector('button').focus()\n}\n\nfunction template(title, message){\n    return `\n        <div class=\"custom-form w-75 bg-white p-3 rounded\">\n            <div class=\"header\">\n                <h5 class=\"title\">${title}</h5>\n            </div>\n            <div class=\"message border-top border-bottom pt-3 pb-3\">${message}</div>\n            <div class=\"mt-3\">\n                <button type=\"button\" class=\"btn btn-success close\">Close</button>\n            </div>\n        </div>`\n}\n\nconst show = function(title, message){\n    const panel = document.createElement('DIV')\n    panel.classList.add('custom-panel')\n    panel.innerHTML = template(title, message)\n    const button = panel.querySelector('button')\n    panel.addEventListener('click', ()=>{\n        hide()\n        setTimeout( remove, 100 )\n    })\n    document.body.appendChild(panel)\n    setTimeout( delayed, 1)\n}\n\n\n//# sourceURL=webpack://AJE/./src/js/feedback.js?");

/***/ }),

/***/ "./src/js/helpers.js":
/*!***************************!*\
  !*** ./src/js/helpers.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"arraysEqual\": () => (/* binding */ arraysEqual),\n/* harmony export */   \"arraySubset\": () => (/* binding */ arraySubset),\n/* harmony export */   \"insertAfter\": () => (/* binding */ insertAfter),\n/* harmony export */   \"isInline\": () => (/* binding */ isInline),\n/* harmony export */   \"isList\": () => (/* binding */ isList),\n/* harmony export */   \"isBlock\": () => (/* binding */ isBlock),\n/* harmony export */   \"isCustom\": () => (/* binding */ isCustom),\n/* harmony export */   \"getParentBlockNode\": () => (/* binding */ getParentBlockNode),\n/* harmony export */   \"getTopParentNode\": () => (/* binding */ getTopParentNode),\n/* harmony export */   \"cleanForSaving\": () => (/* binding */ cleanForSaving),\n/* harmony export */   \"getRange\": () => (/* binding */ getRange),\n/* harmony export */   \"setCursor\": () => (/* binding */ setCursor),\n/* harmony export */   \"debounce\": () => (/* binding */ debounce),\n/* harmony export */   \"appliedFormats\": () => (/* binding */ appliedFormats)\n/* harmony export */ });\n/* harmony import */ var _icons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./icons */ \"./src/js/icons.js\");\n// -----------------------------------------------------------------------------\n// @section Arrays\n// -----------------------------------------------------------------------------\n\n\n\nconst arraysEqual = function( a, b ){\n    if ( a.length != 0 && b.length!= 0 && a.length != b.length ){\n        return false\n    }\n    return a.every( (item, index) => b[index] == item )\n}\n\nconst arraySubset = function( a, b ){\n    return a.every( (item, index) => b[index] == item )\n}\n\n\n// -----------------------------------------------------------------------------\n// @section Dom manipulation\n// -----------------------------------------------------------------------------\n\nconst insertAfter = function(newNode, existingNode) {\n    return existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\n}\n\nconst isInline = function( node ){\n    if ( node.tagName == undefined ){\n        return false\n    }\n    const tags = ['B','I','U']\n    return tags.includes(node.tagName)\n}\n\nconst isList = function( node ){\n    if ( node.tagName == undefined ){\n        return false\n    }\n    const tags = ['UL','OL','LI']\n    return tags.includes(node.tagName)\n}\n\nconst isBlock = function( node ){\n    if ( node.tagName == undefined ){\n        return false\n    }\n    // const tags = ['DIV','H1','H2','H3','H4','H5','H6','P','LI']\n    const tags = ['DIV','H1','H2','P','LI']\n    return tags.includes(node.tagName)\n}\n\nconst isCustom = function( node ){\n    // if ( node.tagName == undefined ){\n    //     return false\n    // }\n    // if ( isInline(node) || isBlock(node) || isList(node) ){\n    //     return false\n    // }\n    // if ( node.contenteditable == false ){\n    //     return false\n    // }\n    // return true\n    // @todo Check this is the correct test - i.e. quotes required\n    return node.contenteditable == 'false'\n }\n\n const getParentBlockNode = function(node){\n    // Keep going up the tree while the node is not a block node\n    // (the editor is a block node - a DIV)\n    while ( isBlock(node)==false ){\n        node = node.parentNode\n    }\n    return node\n}\n\nconst getTopParentNode = function( node, stopNode ){\n    // Return the stopNode if that is the first found\n    // Otherwise return the immediately below the stop node\n    let saved = node\n    while ( node != stopNode ){\n        saved = node\n        node = node.parentNode\n    }\n    return saved\n}\n\nconst cleanForSaving = function( node, buttons ){\n    // if ( node.nodeType === 1 && node.tagName == 'BLOCKQUOTE' ){\n    //     debugger\n    // }\n    // Trim text nodes with CR's\n    if ( node.nodeType === 3 ){\n        if ( node.textContent.includes('\\n') ){\n            node.textContent = node.textContent.trim()\n        }\n        return\n    }\n    // Now strip anything other than a normal node\n    if ( node.nodeType !== 1 ){\n        node.remove()\n        return\n    }\n    // Remove anything we don't recognise\n    if ( isBlock(node) === false && \n         isList(node) === false && \n         isInline(node) === false && \n         isCustom(node) === false ){\n        node.remove()\n        return\n    }\n    // Handle custom nodes\n    if ( buttons.length>0 && isCustom(node)  ){\n        // Does it require cleaning?\n        const match = buttons.find( \n            button => button.tag.toUpperCase()===node.tagName\n        )\n        if ( match && \"clean\" in match ){\n            const newNode = match.clean(node)\n            node.parentNode.replaceChild(newNode, node)\n        }\n        return\n    } \n    // Handle child nodes\n    node.childNodes.forEach( child => {\n        cleanForSaving( child, buttons )\n    })\n    return \n}\n\n\n// -----------------------------------------------------------------------------\n// @section Selection and keyboard methods\n// -----------------------------------------------------------------------------\n\nconst getRange = function(){\n    // The selector is looking for a class used with modals so selections\n    // are ignored when modals are active\n    if ( document.querySelector('.no-range-if-shown.show') === null ){\n        let sel = window.getSelection()\n        if ( sel.rangeCount==1 ){\n            let range =  sel.getRangeAt(0)\n            // First parent node that is a block tag\n            range.blockParent = getParentBlockNode(range.commonAncestorContainer)\n            // First parent node\n            range.rootNode = range.commonAncestorContainer\n            if ( range.commonAncestorContainer.nodeType === 3 ) {\n                range.rootNode = range.commonAncestorContainer.parentNode\n            } \n            return range\n        }\n    }\n    return false\n}\n\nconst setCursor = function( node, offset ){\n    let range = document.createRange()\n    let selection = window.getSelection()\n    range.setStart(node, offset)\n    range.collapse(true)\n    selection.removeAllRanges()\n    selection.addRange(range)\n    return range\n}\n\nconst debounce = function(fn, delay) {\n    let timeOutId\n    return function(...args) {\n        // Clear previous timeout if not expired\n        if( timeOutId ) {\n            clearTimeout(timeOutId)\n        }\n        // Set new timeout\n        timeOutId = setTimeout(() => {\n            fn(...args)\n        }, delay);\n    }\n}\n\nconst appliedFormats = function( node, editorNode, rootNode , formatType){\n    let formats = []\n    // Collect tags of appropriate type\n    while ( node != editorNode && node != null ){\n        if ( node.nodeType === 1 ){   \n            if ( formatType == '' ){\n                formats.unshift( node.tagName )\n            } else if ( formatType == 'inline' ){\n                if ( isInline(node) ){\n                    formats.unshift( node.tagName )\n                }\n            } else if ( formatType == 'block' ){\n                if ( isBlock(node)){\n                    formats.unshift( node.tagName )\n                }\n            } else if ( formatType == 'enter' ){\n                formats.unshift( node )\n                if ( node == rootNode ){\n                    break\n                }\n            }\n        }\n        node = node.parentNode\n    }\n    //console.log(`Applied formats = [${formats.join(' => ')}]`)\n    return formats\n}\n\n\n\n\n//# sourceURL=webpack://AJE/./src/js/helpers.js?");

/***/ }),

/***/ "./src/js/icons.js":
/*!*************************!*\
  !*** ./src/js/icons.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"h1\": () => (/* binding */ h1),\n/* harmony export */   \"h2\": () => (/* binding */ h2),\n/* harmony export */   \"p\": () => (/* binding */ p),\n/* harmony export */   \"ol\": () => (/* binding */ ol),\n/* harmony export */   \"ul\": () => (/* binding */ ul),\n/* harmony export */   \"b\": () => (/* binding */ b),\n/* harmony export */   \"i\": () => (/* binding */ i),\n/* harmony export */   \"u\": () => (/* binding */ u),\n/* harmony export */   \"clear\": () => (/* binding */ clear),\n/* harmony export */   \"undo\": () => (/* binding */ undo),\n/* harmony export */   \"redo\": () => (/* binding */ redo),\n/* harmony export */   \"person\": () => (/* binding */ person),\n/* harmony export */   \"action\": () => (/* binding */ action),\n/* harmony export */   \"actionClosedIncomplete\": () => (/* binding */ actionClosedIncomplete),\n/* harmony export */   \"actionClosedComplete\": () => (/* binding */ actionClosedComplete),\n/* harmony export */   \"agreement\": () => (/* binding */ agreement),\n/* harmony export */   \"link\": () => (/* binding */ link),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"view\": () => (/* binding */ view),\n/* harmony export */   \"edit\": () => (/* binding */ edit),\n/* harmony export */   \"dots\": () => (/* binding */ dots),\n/* harmony export */   \"arrowRight\": () => (/* binding */ arrowRight),\n/* harmony export */   \"dashboardLarge\": () => (/* binding */ dashboardLarge),\n/* harmony export */   \"backArrowLarge\": () => (/* binding */ backArrowLarge)\n/* harmony export */ });\n/**\n * \n * This file includes source software from Bootstrap (https://icons.getbootstrap.com)\n * is MIT licenced which is reproduced here in full.\n * \n * The MIT License (MIT)\n *\n * Copyright (c) 2011-2018 Twitter, Inc.\n * Copyright (c) 2011-2018 The Bootstrap Authors\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n * \n * Usage:\n * \n * These icons are form version 1.4.0\n * To add or modify icons, find the icon using the link above and then copy the path component of the svg source\n * \n */\n\n\n\nfunction icon( path, options ){\n    let width  = 16\n    let height = 16\n    let scale  = 1\n    if ( options != undefined ){\n        if ( options.scale ){\n            scale = options.scale\n            width = width * scale\n            height = height * scale\n        }\n    }\n    return `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" fill=\"currentColor\">\n            <g transform=\"scale(${scale})\">\n                ${path}\n            </g>\n        </svg>`\n}\n\nconst h1 = icon( `\n    <path d=\"M8.637 13V3.669H7.379V7.62H2.758V3.67H1.5V13h1.258V8.728h4.62V13h1.259zm5.329 0V3.669h-1.244L10.5 5.316v1.265l2.16-1.565h.062V13h1.244z\"/>\n`)\nconst h2 = icon( `\n    <path d=\"M7.638 13V3.669H6.38V7.62H1.759V3.67H.5V13h1.258V8.728h4.62V13h1.259zm3.022-6.733v-.048c0-.889.63-1.668 1.716-1.668.957 0 1.675.608 1.675 1.572 0 .855-.554 1.504-1.067 2.085l-3.513 3.999V13H15.5v-1.094h-4.245v-.075l2.481-2.844c.875-.998 1.586-1.784 1.586-2.953 0-1.463-1.155-2.556-2.919-2.556-1.941 0-2.966 1.326-2.966 2.74v.049h1.223z\"/>\n`)\nconst p = icon( `\n    <path d=\"M10.5 15a.5.5 0 0 1-.5-.5V2H9v12.5a.5.5 0 0 1-1 0V9H7a4 4 0 1 1 0-8h5.5a.5.5 0 0 1 0 1H11v12.5a.5.5 0 0 1-.5.5z\"/>\n`)\nconst ol = icon( `\n    <path fill-rule=\"evenodd\" d=\"M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5z\"/>\n    <path d=\"M1.713 11.865v-.474H2c.217 0 .363-.137.363-.317 0-.185-.158-.31-.361-.31-.223 0-.367.152-.373.31h-.59c.016-.467.373-.787.986-.787.588-.002.954.291.957.703a.595.595 0 0 1-.492.594v.033a.615.615 0 0 1 .569.631c.003.533-.502.8-1.051.8-.656 0-1-.37-1.008-.794h.582c.008.178.186.306.422.309.254 0 .424-.145.422-.35-.002-.195-.155-.348-.414-.348h-.3zm-.004-4.699h-.604v-.035c0-.408.295-.844.958-.844.583 0 .96.326.96.756 0 .389-.257.617-.476.848l-.537.572v.03h1.054V9H1.143v-.395l.957-.99c.138-.142.293-.304.293-.508 0-.18-.147-.32-.342-.32a.33.33 0 0 0-.342.338v.041zM2.564 5h-.635V2.924h-.031l-.598.42v-.567l.629-.443h.635V5z\"/>\n`)\nconst ul = icon( `\n    <path fill-rule=\"evenodd\" d=\"M5 11.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zm-3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm0 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"/>\n`)\nconst b = icon( `\n    <path d=\"M8.21 13c2.106 0 3.412-1.087 3.412-2.823 0-1.306-.984-2.283-2.324-2.386v-.055a2.176 2.176 0 0 0 1.852-2.14c0-1.51-1.162-2.46-3.014-2.46H3.843V13H8.21zM5.908 4.674h1.696c.963 0 1.517.451 1.517 1.244 0 .834-.629 1.32-1.73 1.32H5.908V4.673zm0 6.788V8.598h1.73c1.217 0 1.88.492 1.88 1.415 0 .943-.643 1.449-1.832 1.449H5.907z\"/>\n`)\nconst i = icon( `\n    <path d=\"M7.991 11.674 9.53 4.455c.123-.595.246-.71 1.347-.807l.11-.52H7.211l-.11.52c1.06.096 1.128.212 1.005.807L6.57 11.674c-.123.595-.246.71-1.346.806l-.11.52h3.774l.11-.52c-1.06-.095-1.129-.211-1.006-.806z\"/>\n`)\nconst u  = icon( `\n    <path d=\"M5.313 3.136h-1.23V9.54c0 2.105 1.47 3.623 3.917 3.623s3.917-1.518 3.917-3.623V3.136h-1.23v6.323c0 1.49-.978 2.57-2.687 2.57-1.709 0-2.687-1.08-2.687-2.57V3.136zM12.5 15h-9v-1h9v1z\"/>\n`)\nconst clear = icon( `\n    <path d=\"M8.086 2.207a2 2 0 0 1 2.828 0l3.879 3.879a2 2 0 0 1 0 2.828l-5.5 5.5A2 2 0 0 1 7.879 15H5.12a2 2 0 0 1-1.414-.586l-2.5-2.5a2 2 0 0 1 0-2.828l6.879-6.879zm2.121.707a1 1 0 0 0-1.414 0L4.16 7.547l5.293 5.293 4.633-4.633a1 1 0 0 0 0-1.414l-3.879-3.879zM8.746 13.547 3.453 8.254 1.914 9.793a1 1 0 0 0 0 1.414l2.5 2.5a1 1 0 0 0 .707.293H7.88a1 1 0 0 0 .707-.293l.16-.16z\"/>\n`)\nconst undo = icon( `\n    <path d=\"M6.598 5.013a.144.144 0 0 1 .202.134V6.3a.5.5 0 0 0 .5.5c.667 0 2.013.005 3.3.822.984.624 1.99 1.76 2.595 3.876-1.02-.983-2.185-1.516-3.205-1.799a8.74 8.74 0 0 0-1.921-.306 7.404 7.404 0 0 0-.798.008h-.013l-.005.001h-.001L7.3 9.9l-.05-.498a.5.5 0 0 0-.45.498v1.153c0 .108-.11.176-.202.134L2.614 8.254a.503.503 0 0 0-.042-.028.147.147 0 0 1 0-.252.499.499 0 0 0 .042-.028l3.984-2.933zM7.8 10.386c.068 0 .143.003.223.006.434.02 1.034.086 1.7.271 1.326.368 2.896 1.202 3.94 3.08a.5.5 0 0 0 .933-.305c-.464-3.71-1.886-5.662-3.46-6.66-1.245-.79-2.527-.942-3.336-.971v-.66a1.144 1.144 0 0 0-1.767-.96l-3.994 2.94a1.147 1.147 0 0 0 0 1.946l3.994 2.94a1.144 1.144 0 0 0 1.767-.96v-.667z\"/>\n`)\nconst redo = icon( `\n    <path d=\"M6.598 5.013a.144.144 0 0 1 .202.134V6.3a.5.5 0 0 0 .5.5c.667 0 2.013.005 3.3.822.984.624 1.99 1.76 2.595 3.876-1.02-.983-2.185-1.516-3.205-1.799a8.74 8.74 0 0 0-1.921-.306 7.404 7.404 0 0 0-.798.008h-.013l-.005.001h-.001L7.3 9.9l-.05-.498a.5.5 0 0 0-.45.498v1.153c0 .108-.11.176-.202.134L2.614 8.254a.503.503 0 0 0-.042-.028.147.147 0 0 1 0-.252.499.499 0 0 0 .042-.028l3.984-2.933zM7.8 10.386c.068 0 .143.003.223.006.434.02 1.034.086 1.7.271 1.326.368 2.896 1.202 3.94 3.08a.5.5 0 0 0 .933-.305c-.464-3.71-1.886-5.662-3.46-6.66-1.245-.79-2.527-.942-3.336-.971v-.66a1.144 1.144 0 0 0-1.767-.96l-3.994 2.94a1.147 1.147 0 0 0 0 1.946l3.994 2.94a1.144 1.144 0 0 0 1.767-.96v-.667z\"/>\n`)\nconst person = icon( `\n    <path d=\"M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z\"/>\n`)\nconst action = icon( `\n    <path d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z\"/>\n`)\nconst actionClosedIncomplete = icon( `\n    <path d=\"M5.164 14H15c-.299-.199-.557-.553-.78-1-.9-1.8-1.22-5.12-1.22-6 0-.264-.02-.523-.06-.776l-.938.938c.02.708.157 2.154.457 3.58.161.767.377 1.566.663 2.258H6.164l-1 1zm5.581-9.91a3.986 3.986 0 0 0-1.948-1.01L8 2.917l-.797.161A4.002 4.002 0 0 0 4 7c0 .628-.134 2.197-.459 3.742-.05.238-.105.479-.166.718l-1.653 1.653c.02-.037.04-.074.059-.113C2.679 11.2 3 7.88 3 7c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0c.942.19 1.788.645 2.457 1.284l-.707.707zM10 15a2 2 0 1 1-4 0h4zm-9.375.625a.53.53 0 0 0 .75.75l14.75-14.75a.53.53 0 0 0-.75-.75L.625 15.625z\"/>\n`)\nconst actionClosedComplete = icon( `\n    <path d=\"M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z\"/>\n`)\nconst agreement = icon( `\n    <path d=\"M2.5 8a5.5 5.5 0 0 1 8.25-4.764.5.5 0 0 0 .5-.866A6.5 6.5 0 1 0 14.5 8a.5.5 0 0 0-1 0 5.5 5.5 0 1 1-11 0z\"/>\n    <path d=\"M15.354 3.354a.5.5 0 0 0-.708-.708L8 9.293 5.354 6.646a.5.5 0 1 0-.708.708l3 3a.5.5 0 0 0 .708 0l7-7z\"/>\n`)\nconst link = icon( `\n    <path d=\"M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z\"/>\n    <path d=\"M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z\"/>\n`)\nconst cross = icon( `\n    <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n`)\nconst view = icon( `\n    <path d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\"/>\n    <path d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z\"/>\n`)\nconst edit = icon( `\n    <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\n`)\nconst dots = icon( `\n    <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z\"/>\n`)\nconst arrowRight = icon( `\n    <path fill-rule=\"evenodd\" d=\"M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z\"/>\n`)\nconst dashboardLarge = icon( `\n    <path d=\"M8 4a.5.5 0 0 1 .5.5V6a.5.5 0 0 1-1 0V4.5A.5.5 0 0 1 8 4zM3.732 5.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 10a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 10zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 9.31a.91.91 0 1 0 1.302 1.258l3.434-4.297a.389.389 0 0 0-.029-.518z\"/>\n    <path fill-rule=\"evenodd\" d=\"M0 10a8 8 0 1 1 15.547 2.661c-.442 1.253-1.845 1.602-2.932 1.25C11.309 13.488 9.475 13 8 13c-1.474 0-3.31.488-4.615.911-1.087.352-2.49.003-2.932-1.25A7.988 7.988 0 0 1 0 10zm8-7a7 7 0 0 0-6.603 9.329c.203.575.923.876 1.68.63C4.397 12.533 6.358 12 8 12s3.604.532 4.923.96c.757.245 1.477-.056 1.68-.631A7 7 0 0 0 8 3z\"/>\n`, { scale:2 }\n)\nconst backArrowLarge = icon( `\n    <path d=\"m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z\"/>\n`, { scale:2 })\n\n// // Alternative approach approach\n// const icons = new Map()\n// icons.set('dashboard', `\n//     <path d=\"M8 4a.5.5 0 0 1 .5.5V6a.5.5 0 0 1-1 0V4.5A.5.5 0 0 1 8 4zM3.732 5.732a.5.5 0 0 1 .707 0l.915.914a.5.5 0 1 1-.708.708l-.914-.915a.5.5 0 0 1 0-.707zM2 10a.5.5 0 0 1 .5-.5h1.586a.5.5 0 0 1 0 1H2.5A.5.5 0 0 1 2 10zm9.5 0a.5.5 0 0 1 .5-.5h1.5a.5.5 0 0 1 0 1H12a.5.5 0 0 1-.5-.5zm.754-4.246a.389.389 0 0 0-.527-.02L7.547 9.31a.91.91 0 1 0 1.302 1.258l3.434-4.297a.389.389 0 0 0-.029-.518z\"/>\n//     <path fill-rule=\"evenodd\" d=\"M0 10a8 8 0 1 1 15.547 2.661c-.442 1.253-1.845 1.602-2.932 1.25C11.309 13.488 9.475 13 8 13c-1.474 0-3.31.488-4.615.911-1.087.352-2.49.003-2.932-1.25A7.988 7.988 0 0 1 0 10zm8-7a7 7 0 0 0-6.603 9.329c.203.575.923.876 1.68.63C4.397 12.533 6.358 12 8 12s3.604.532 4.923.96c.757.245 1.477-.056 1.68-.631A7 7 0 0 0 8 3z\"/>\n// `)\n\n// export const Icon = function( name, scaled ){\n//     icon = icons.get('dashboard')\n//     let width  = 16\n//     let height = 16\n//     let scale = 1\n//     if ( scaled != undefined ){\n//         scale = scaled\n//         width = width * scale\n//         height = height * scale\n//     }\n//     return `\n//         <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" fill=\"currentColor\">\n//             <g transform=\"scale(${scale})\">\n//                 ${icon}\n//             </g>\n//         </svg>`\n// }\n\n\n//# sourceURL=webpack://AJE/./src/js/icons.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Editor\": () => (/* binding */ Editor),\n/* harmony export */   \"Mentions\": () => (/* binding */ Mentions),\n/* harmony export */   \"Links\": () => (/* binding */ Links),\n/* harmony export */   \"ModalConfirm\": () => (/* binding */ ModalConfirm),\n/* harmony export */   \"Icons\": () => (/* binding */ Icons)\n/* harmony export */ });\n// https://stackoverflow.com/questions/42719908/use-webpack-to-bundle-several-es6-classes-into-one-file-for-import-in-a-script-t\n\nconst Editor = __webpack_require__(/*! ./Editor.js */ \"./src/js/Editor.js\").default\nconst ModalConfirm = __webpack_require__(/*! ./ModalConfirm.js */ \"./src/js/ModalConfirm.js\").default\nconst Mentions = __webpack_require__(/*! ./plugins/Mentions.js */ \"./src/js/plugins/Mentions.js\").default\nconst Links = __webpack_require__(/*! ./plugins/Links.js */ \"./src/js/plugins/Links.js\").default\n\nconst Icons = __webpack_require__(/*! ./icons.js */ \"./src/js/icons.js\")\n\n\n\n//# sourceURL=webpack://AJE/./src/js/index.js?");

/***/ }),

/***/ "./src/js/inline.js":
/*!**************************!*\
  !*** ./src/js/inline.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"click\": () => (/* binding */ click)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./src/js/helpers.js\");\n/* harmony import */ var _phase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./phase.js */ \"./src/js/phase.js\");\n\n\n\nlet editorNode\nlet formatAction = ''\nlet newFormat = ''\nlet categorisedTextNodes = []\nlet range\nlet fragmentNode\n\n\nfunction categoriseProtectedNode( node ){\n    const formats = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.appliedFormats(node, editorNode, range.rootNode, 'inline' )\n    categorisedTextNodes.push({\n        node: node.cloneNode(true),\n        text:'',\n        formats\n    })\n}\n\nfunction categoriseTextNode( node ){\n    console.log( `Categorise text node [${node.textContent}]`)\n    // Get the [0] pre, [1]selected and [2]post text\n    const texts = getTextNodes( node )\n    // console.log(`texts = [${texts.join(', ')}]`)\n    let formats = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.appliedFormats(node, editorNode, range.rootNode, 'inline' )\n    // console.log(`current formats = [${formats.join(' ')}]`)\n    // Pre text\n    if ( texts[0] ){\n        console.log(`Adding pre text [${texts[0]}]`)\n        categorisedTextNodes.push({\n            node: false,\n            text: texts[0],\n            formats\n        })\n    }\n    // Selected text\n    if ( texts[1] ){\n        let newFormats = formats.slice()\n        if ( formatAction == 'apply'  ){\n            if ( newFormats.includes(newFormat) == false ){\n                // console.log( `Adding new format [${newFormat}] in phase [${Phase.get()}]`)\n                newFormats.push(newFormat)\n            }\n        } else if ( formatAction == 'remove' ){\n            if ( newFormat == 'CLEAR' ){\n                newFormats = []\n            } else {\n                newFormats = formats.filter( format => format != newFormat )\n            }\n        }\n        // console.log(`Adding selected text [${texts[1]}]`)\n        categorisedTextNodes.push({\n            node:false,\n            text:texts[1],\n            formats: newFormats\n        })\n    }\n    // Post text\n    if ( texts[2] ){\n        // console.log(`Adding post text [${texts[2]}]`)\n        categorisedTextNodes.push({\n            node:false,\n            text:texts[2],\n            formats\n        })\n    }\n}\n\nfunction parseInlineNode( node ){\n    let n = false\n    let t = false\n    _phase_js__WEBPACK_IMPORTED_MODULE_1__.set( node )\n    // Parent node\n    if ( node.nodeType === 1 ){\n        console.log(`Parsing parent node`, node.outerHTML )\n        if ( node.getAttribute('contenteditable') == 'false' ){\n            categoriseProtectedNode( node )\n        } else {\n            node.childNodes.forEach( child => {\n                parseInlineNode( child )\n            })\n        }\n    } else if ( node.nodeType === 3 ){\n        categoriseTextNode( node )\n    }\n}\n\nfunction processCategorisedNodes(){\n    // Node list is as follows\n    // [i] = {node, text, formats, sorted}\n    // where node present for custom nodes like actions\n    // and sorted is the list of formats ordered\n    //\n    // Combine nodes with same formats or spaces (and no formats)\n    for( let i=1; i<categorisedTextNodes.length; i++ ){\n        let current = categorisedTextNodes[i]\n        let previous = categorisedTextNodes[i-1]\n        if ( previous.node == false && current.node == false ){\n            if ( previous.sorted == current.sorted /* || current.text == ' ' */) {\n                // Combine texts in current node\n                current.text = previous.text + current.text\n                // Bring formats forwad in case current text was a space (with no formats)\n                current.formats = previous.formats\n                // Clear previous text\n                previous.text = ''\n            }\n        }\n    }\n    // Join remaining nodes with required formatting\n    categorisedTextNodes.forEach( node => {\n        // Just add custom nodes\n        if ( node.node ){\n            fragmentNode.appendChild(node.node)\n        // If have any text then add with formats\n        } else if ( node.text != '' ){\n            let n\n            // Build up format nodes\n            node.formats.forEach( format => {\n                const temp = document.createElement(format)\n                if ( n ){\n                    n = n.appendChild(temp)\n                } else {\n                    n = temp\n                }\n            })\n            // Add the text node\n            const t = document.createTextNode(node.text)\n            if ( n ){\n                n.appendChild(t)\n            } else {\n                n = t\n            }\n            // Come back up the tree\n            while ( n.parentNode !== null ){\n                n = n.parentNode\n            }    \n            // Add to the node to the fragment            \n            fragmentNode.appendChild(n)\n        }\n    })\n}\n\nfunction getTextNodes( node ){\n    // Before, during and after texts\n    let texts = []\n    if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.both() ) {\n        texts.push( node.textContent.substring(0,range.startOffset) )\n        texts.push( node.textContent.substring(range.startOffset,range.endOffset) )\n        texts.push( node.textContent.substring(range.endOffset) )\n    } else if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.first() ){\n        texts.push( node.textContent.substring(0,range.startOffset) )\n        texts.push( node.textContent.substring(range.startOffset) )\n        texts.push( '' )\n    } else if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.last() ){\n        texts.push( '' )\n        texts.push( node.textContent.substring(0,range.endOffset) )\n        texts.push( node.textContent.substring(range.endOffset) )\n    } else if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.during() ){\n        texts.push( '' )\n        texts.push( node.textContent )\n        texts.push( '' )   \n    } else if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.pre() ){\n        texts.push( node.textContent )\n        texts.push( '' )\n        texts.push( '' )\n    } else if ( _phase_js__WEBPACK_IMPORTED_MODULE_1__.post() ){\n        texts.push( '' )\n        texts.push( '' )\n        texts.push( node.textContent )\n    }\n    // Check for trailing spaces\n    if ( texts[2] == ' ' ){\n        texts[2] = ''\n        texts[1] += ' '\n    }\n    return texts\n}\n\nfunction logCategorisedNodes(debug){\n    let c = []\n    categorisedTextNodes.forEach( n => {\n        // Sort the formats - for later comparison\n        n.formats.sort()\n        n.sorted = n.formats.join(' ')\n        // List the nodes\n        let f = n.formats.join(' ')\n        c.push( {\n            html: n.node ? n.node.outerHTML : '',\n            text: n.text,\n            formats: f,\n            sorted: n.sorted\n        })\n    })\n    if ( debug ){\n        console.table(c)\n    }\n}\n\nconst click = function( button, rng, editor ){\n    // Initialisation\n    range = rng\n    editorNode = editor\n    formatAction = 'apply'\n    if ( button.tag == 'CLEAR' || button.element.getAttribute('data-active') ){\n        formatAction = 'remove'\n    }\n    // console.log('Format action', formatAction)\n    newFormat = button.tag\n    range.rootNode = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getTopParentNode( range.rootNode, editorNode )\n    // The root node must be a block node (including list item LI) or an inline node\n    if ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isBlock(range.rootNode) == false &&\n         _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInline(range.rootNode) == false ){\n       return\n    }\n    // Look for inline parent nodes that only have one child\n    // to ensure can clear all formats from selected text\n    while ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInline(range.rootNode.parentNode) && \n            range.rootNode.parentNode.childNodes.length === 1){\n        range.rootNode = range.rootNode.parentNode\n    }\n    // Reset fragment and categorised nodes\n    fragmentNode = document.createElement('DIV')\n    categorisedTextNodes = []\n    // Init phase for list formatting\n    _phase_js__WEBPACK_IMPORTED_MODULE_1__.init(range, false)\n    // Parse\n    console.log('%cStarting inline parsing ...', 'background-color:red; color:white; padding:0.5rem;')\n    parseInlineNode( range.rootNode )\n    // true = debugging\n    logCategorisedNodes(true)\n    // Process saved nodes\n    processCategorisedNodes()\n    // Write out changes\n    if ( _helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInline(range.rootNode) ){\n        range.rootNode.outerHTML = fragmentNode.innerHTML\n    } else {\n        range.rootNode.innerHTML = fragmentNode.innerHTML\n    }\n    // updateEventHandlers()\n    // console.log('fragmentNode', fragmentNode)\n}\n\n//# sourceURL=webpack://AJE/./src/js/inline.js?");

/***/ }),

/***/ "./src/js/phase.js":
/*!*************************!*\
  !*** ./src/js/phase.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"init\": () => (/* binding */ init),\n/* harmony export */   \"get\": () => (/* binding */ get),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"pre\": () => (/* binding */ pre),\n/* harmony export */   \"first\": () => (/* binding */ first),\n/* harmony export */   \"both\": () => (/* binding */ both),\n/* harmony export */   \"last\": () => (/* binding */ last),\n/* harmony export */   \"during\": () => (/* binding */ during),\n/* harmony export */   \"post\": () => (/* binding */ post)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./src/js/helpers.js\");\n\n\n\nlet startContainer\nlet endContainer\nlet phase = ''\n\nconst init = function(range, block){\n    startContainer = range.startContainer \n    endContainer = range.endContainer \n    // For block formatting start with block (not text nodes)\n    if ( block ){\n        startContainer = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getParentBlockNode(startContainer)\n        endContainer = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.getParentBlockNode(endContainer)\n    }\n    phase = 'pre'\n}\n\nconst get = function(){\n    return phase\n}\n\n// @todo This needs to move into helpes but need to pass in the range \n// or start and end containers (which could lose the block_or_inline param)\n// Would also need to pass in the current phase and return the new phase\nconst set = function( node ){\n    // Adjust phase\n    if ( node == startContainer ){\n        phase = 'first'\n        if ( node == endContainer ){\n            phase = 'both'\n        }\n    } else if ( node == endContainer ){\n        phase = 'last'\n    } else if ( phase == 'first') {\n        phase = 'during'\n    } else if ( phase == 'both' || phase == 'last' ){\n        phase = 'post-first'\n    } else if ( phase == 'post-first' ){\n        phase = 'post'\n    }\n    console.log('New phase=',phase)\n}\n\nconst pre = function(){\n    return phase == 'pre'\n}\n\nconst first = function(){\n    return phase == 'first' || phase == 'both' \n}\n\nconst both = function(){\n    return phase == 'both' \n}\n\nconst last = function(){\n    return phase == 'last'\n}\n\nconst during = function(){\n    return phase == 'during' || phase == 'first' || phase == 'last' || phase == 'both' \n}\n\nconst post = function(){\n    return phase == 'post-first' || phase == 'post' \n}\n\n\n//# sourceURL=webpack://AJE/./src/js/phase.js?");

/***/ }),

/***/ "./src/js/plugins/Links.js":
/*!*********************************!*\
  !*** ./src/js/plugins/Links.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n\nclass Links {\n\n    constructor( target, icon, modalClass ){\n        this.editor = target\n        this.modalClass = modalClass\n        // The popup panel and input change status\n        this.panel = null\n        this.changed = false\n        // Initialise links\n        this.link = false\n        let links = this.editor.querySelectorAll( 'a' )\n        links.forEach( link => format( link ))\n        this.dirty = false\n        // Initialise button\n        this.button = {\n            //\n            // Mandatory attributes\n            //\n            // The tag should be a valid html id that isn't already used\n            tag:'a',\n            // The tooltip label \n            label:'Link', \n            // The icon passed in should be a 16 x 16 svg tag\n            icon:icon,\n            // The button click handler and reference to the instance\n            click:this.click,\n            that:this,\n            //\n            // Optional attributes\n            //\n            // Keyboard shortcut\n            shortcut:'@',\n            // Any pre setup required (this will probably move into the constructor)\n            // setup,\n            // Callback to initialise event handling for custom objects in the editor\n            addEventHandlers:this.addEventHandlers,\n            // Call back for any custom data cleaning required on save\n            clean:this.clean,\n        }\n    }\n\n    // initLinks(){\n    //     let links = this.target.querySelectorAll( 'a' )\n    //     links.forEach( link => format( link ))\n    // }\n\n\n    insert(id){\n        const link = document.createElement('a')\n        link.id = id\n        link.setAttribute('contenteditable', 'false')\n        link.innerText = ' '\n        const parent = this.range.startContainer.parentNode\n        const preText = this.range.startContainer.textContent.substring(0,this.range.startOffset)\n        let postText\n        if ( this.range.collapsed ){\n            postText = this.range.startContainer.textContent.substring(this.range.startOffset)\n        } else {\n            postText = this.range.startContainer.textContent.substring(this.range.endOffset)\n        }\n        if ( preText ) {\n            parent.insertBefore(document.createTextNode(preText), this.range.startContainer)\n        }\n        parent.insertBefore(link, this.range.startContainer)\n        if ( postText ) {\n            parent.insertBefore(document.createTextNode(postText), this.range.startContainer)\n        }\n        this.range.startContainer.remove()\n    }\n\n    updateDomDelayed(id){\n        // Update dom\n        const userForm = this.panel.querySelector('form')\n        const link = this.editor.querySelector(`a#${this.link.id}`)\n        link.href = userForm.querySelector('#href').value\n        link.innerText = userForm.querySelector('#label').value\n        // Add event handler\n        this.format(link)\n    }\n\n    saveChanges(){\n        console.log('Save changes')\n        // Create new link and add to the editor?\n        if ( this.link.id == '' ){\n            this.link.id = this.generateUid()\n            this.insert(this.link.id)\n        }\n        setTimeout( ()=>this.updateDomDelayed(this.link.id), 10)\n        // Close the edit pane\n        this.hide()\n    } \n\n    click( range, link ){\n        console.log('click link')\n        if ( range === false && link === undefined){\n            console.log('No range or link selected')\n            return\n        }\n        // Check content\n        const _this = this.that ? this.that : this\n        console.log('this should be the link class', _this)\n        let edit = true\n        _this.link = link\n        _this.range = range\n        _this.panel = document.createElement('DIV')\n        _this.panel.id = 'link-edit'\n        _this.panel.classList.add('edit-panel')\n        // debugger\n        if ( link == undefined ){\n            edit = false\n            let label = ''\n            if ( _this.range.collapsed == false && \n                _this.range.startContainer == _this.range.endContainer ){\n                label = _this.range.endContainer.textContent.substring(_this.range.startOffset, _this.range.endOffset)  \n            }\n            _this.link = {\n                id:'',\n                href:'', \n                label, \n            }\n        }\n        _this.panel.innerHTML = _this.form(_this.link, edit)\n        // Initialise confirmation module and dirty data detection\n        _this.dirty = false\n        _this.modal = new _this.modalClass()\n        const inputs = _this.panel.querySelectorAll('form input')\n        inputs.forEach(input => input.addEventListener('change', ()=>_this.dirty=true))\n        // Handle button events\n        _this.panel.querySelector('button.cancel').addEventListener('click', () => {\n            if ( _this.dirty ){\n                const confirmBtn = _this.modal.show('Cancel changes', 'Do you really want to lose these changes?')\n                confirmBtn.addEventListener( 'click', () => {\n                    _this.modal.hide()\n                    _this.hide()\n                })\n            } else {\n                _this.hide()\n            }\n        })\n        if ( edit ){\n            _this.panel.querySelector('button.delete').addEventListener('click', () => {\n                const confirmBtn = _this.modal.show('Delete link', 'Do you really want to delete this link?')\n                confirmBtn.addEventListener( 'click', ()=>_this.deleteItem() )\n            })\n        }\n        _this.panel.querySelector('button.save').addEventListener('click', ()=>_this.saveChanges())\n        // Add to dom, position and focus the input\n        document.querySelector('body').appendChild(_this.panel)\n    }\n\n    getNewNode(node){\n        let matched = false\n        while ( !matched  ){\n            if ( node.tagName === 'A' ){\n                matched = node\n            }\n            node = node.parentNode\n        }\n        return matched\n    }\n\n\n    editClickedObject(link){\n        // event.preventDefault()\n        // const linkNode = this.getNewNode(event.currentTarget)\n        // console.log('edit link', linkNode )\n        this.link = {\n            id: link.id,\n            href: link.href,\n            label: link.innerText.trim(),\n        }\n        this.click(false, this.link)\n    }\n\n    hide(){\n        // Invoked from the modal\n        this.panel.classList.remove('show')\n        // Use arrow function to preserve \"this\"\n        setTimeout( ()=>this.delayedRemove(), 500 )\n    }\n\n    delayedRemove(){\n        this.panel.remove()\n        this.panel = null\n    }\n\n\n    deleteItem(){\n        // @todo Remove link from the editor\n        this.hide()\n    }\n\n    clean(node){\n        console.log('clean link',node)\n        node.removeAttribute('id')\n        node.removeAttribute('contenteditable')\n        return node\n    }\n\n    format( link ){\n        // Click event handling - first time and after reformatting\n        link.id = this.generateUid()\n        link.setAttribute('contenteditable',false)\n        link.addEventListener('click', event => {\n            event.preventDefault()\n            this.editClickedObject(link) \n        })\n    }\n\n    addEventHandlers( editor ){\n        const links = editor.querySelectorAll('a')\n        links.forEach( link => link.addEventListener('click', event => {\n            event.preventDefault()\n            this.editClickedObject(link) \n        }))\n    }\n\n    // setup(target, firstTime ){\n    //     console.log('Setup links')\n    //     editorNode = target\n    //     currentLink = false\n    //     savedRange = false\n    //     let links = target.querySelectorAll( 'a' )\n    //     links.forEach( link => {\n    //         format( link )\n    //     })\n    // }\n\n    form(link,edit){\n        let title = 'Create link'\n        let delBtn = ''\n        let href = ''\n        let label = ''\n        if ( edit) {\n            title = 'Edit link'\n            delBtn = `<button type=\"button\" class=\"delete\">Delete</button>`\n            href = link.href\n            label = link.label\n        }\n        return `\n            <div class=\"panel-header\">\n                <h1 class=\"panel-title\">${title}</h1>\n            </div>\n            <div class=\"panel-body\">\n                <form>\n                    <div class=\"form-input\">\n                        <input id=\"href\" type=\"text\" class=\"form-control\" placeholder=\"URL\" value=\"${href}\">\n                        <label for=\"href\">URL</label>\n                    </div>\n                    <div class=\"form-input\">\n                        <input id=\"label\" type=\"text\" class=\"form-control\" placeholder=\"Label\" value=\"${label}\">\n                        <label for=\"label\">Label (optional)</label>\n                    </div>\n                    <div class=\"buttons\">\n                        <button type=\"button\" class=\"cancel\">Cancel</button>\n                        ${delBtn}\n                        <button type=\"button\" class=\"save\">Save</button>\n                    </div>\n                </form>\n            </div>`\n    }\n\n    generateUid(){\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Links);\n\n//# sourceURL=webpack://AJE/./src/js/plugins/Links.js?");

/***/ }),

/***/ "./src/js/plugins/Mentions.js":
/*!************************************!*\
  !*** ./src/js/plugins/Mentions.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n\n\nclass Mentions {\n\n    constructor(icon, people){\n        this.people = people.sort()\n        this.position = {x:0, y:0}\n        this.filterInput = ''\n        this.panel = null\n        this.range = false\n        this.button = {\n            //\n            // Mandatory attributes\n            //\n            // The tag should be a valid html id that isn't already used\n            tag:'mention',  \n            // The tooltip label        \n            label:'Mention', \n            // The icon passed in should be a 16 x 16 svg tag\n            icon:icon,\n            // The button click handler and reference to the instance\n            click:this.click,\n            that:this,\n            //\n            // Optional attributes\n            //\n            // Keyboard shortcut\n            shortcut:'@',\n            // Any pre setup required (this will probably move into the constructor)\n            // setup,\n            // Callback to initialise event handling for custom objects in the editor\n            // addEventHandlers,\n            // Call back for any custom data cleaning required on save\n            // clean,\n        }\n    }\n\n    getPosition(dialogue, range){\n        let pos\n        // If this is not a text node then get the first text node\n        // Can happen at the start of a line when backspace to the start\n        if ( range.startContainer.nodeType !== 3 ){\n            if ( range.startContainer.childNodes.length>0 ){\n                let node = range.startContainer.childNodes[0]\n                pos = node.getBoundingClientRect()\n            } else {\n                pos = {x:editor.offsetLeft, y:editor.offsetTop}\n            }\n        // Text node\n        } else {\n            pos = range.getBoundingClientRect()\n            console.log('text node position',pos)\n        }\n        if ( (pos.x + dialogue.outerWidth) > window.innerWidth ){\n            pos.x = window.innerWidth - dialogue.outerWidth - 20;\n        }\n        if ( (pos.y + dialogue.outerHeight) > window.innerHeight ){\n            pos.y = window.innerHeight - dialogue.outerHeight - 40;\n        }\n        return pos\n    } \n\n    form(){\n        return `\n            <div class=\"mentions-content\">\n                <input list=\"people-list\" type=\"text\"/>\n                <datalist id=\"people-list\"></datalist>\n            </div>`\n    }\n\n    handleKeyup(e){\n        console.log('key',e.target)\n        console.log('key',e.key)\n        console.log('shift',e.shiftKey)\n        e.stopPropagation()\n        if ( e.key=='Escape' ){\n            this.panel.remove()\n        } else if ( e.key=='Enter' ){\n            this.insert(this.filterInput.value.trim())\n            this.panel.remove()\n        }\n    }\n\n    click(range){\n        console.log('click mentions')\n        if ( range === false ){\n            console.log('No range selected')\n            return\n        }\n        const _this = this.that\n        _this.range = range\n        _this.panel = document.createElement('DIV')\n        _this.panel.id = 'mentions'\n        _this.panel.classList.add('mentions-panel')\n        _this.panel.innerHTML = _this.form()\n        _this.panel.addEventListener('click',()=>_this.hide())\n        _this.panel.addEventListener('keyup', e=>_this.handleKeyup(e))\n        // Filtering using native html approach\n        _this.filterInput = _this.panel.querySelector('input')\n        const datalist = _this.panel.querySelector('datalist')\n        people.forEach( item => {\n            const option = document.createElement('option')\n            option.innerText = item\n            datalist.appendChild(option)\n        })\n        // Add to dom, position and focus the input\n        document.querySelector('body').appendChild(_this.panel)\n        // Positioning\n        let dialogue = document.querySelector('.mentions-content')\n        _this.position = _this.getPosition(dialogue, range)\n        dialogue.style.top = `${_this.position.y}px`\n        dialogue.style.left = `${_this.position.x}px`\n        // Focus\n        _this.filterInput.focus()\n    }\n\n    hide(){\n        console.log('Hide panel')\n        this.panel.remove()\n    }\n\n    insert(event_or_person){\n        let person\n        if ( event_or_person.target != undefined ){\n        if ( \"target\" in event_or_person )\n            person = event_or_person.target.innerText\n        } else {\n            person = event_or_person\n        }\n        console.log('Insert person', person)\n        let contents = this.range.startContainer.textContent\n        let offset   = this.range.startOffset\n        let before   = contents.substring(0,offset)\n        let after    = contents.substring(offset)\n        // Add space before?\n        if ( contents.charCodeAt(offset-1) !== 32){\n            person = ' ' + person\n        }\n        // Add space after & optional remove @\n        if ( offset<contents.length && contents.charCodeAt(offset) !== 32){\n            if ( after != '' && after.charAt(0) === '@'){\n                after = after.slice(1, after.length-1)\n            }\n            person = person + ' '\n        }\n        this.range.startContainer.textContent = before + person + after\n        // Move offset to the end of the newly inserted person\n        offset += person.length\n        this.range = this.setCursor( this.range.startContainer, offset )\n        this.panel.remove()\n    }\n\n    setCursor( node, offset ){\n        let range = document.createRange()\n        let sel = window.getSelection()\n        range.setStart(node, offset);\n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        return range;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Mentions);\n\n//# sourceURL=webpack://AJE/./src/js/plugins/Mentions.js?");

/***/ }),

/***/ "./src/js/templates.js":
/*!*****************************!*\
  !*** ./src/js/templates.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"editor\": () => (/* binding */ editor)\n/* harmony export */ });\nfunction editorToolbarButton(button){\n    const {type, tag, label, icon} = button\n    if ( button.attr === undefined ){\n        button.attr = ''\n    }\n    // e.g. icon \"bi-eye\"\n    // data-bs-toggle=\"button\" allows the active state to be shown by adding\n    // the class \"active\" and aria-pressed=\"true\"(for assistive tech)\n    return `\n        <button id=\"${tag}\" type=\"button\" class=\"btn btn-light ${type}\" \n            ${button.attr} aria-label=\"${label}\" title=${label}>\n            ${icon}\n        </button>`\n}\n\nfunction editorToolbar(buttons){\n    let htmlButtons = {\n        block:'',\n        list:'',\n        inline:'',\n        edit:'',\n        custom:''\n    }\n    buttons.forEach( button => {\n        switch (button.type){\n            case 'block':\n                htmlButtons.block += editorToolbarButton(button)\n                break\n            case 'list':\n                htmlButtons.list += editorToolbarButton(button)\n                break\n            case 'inline':\n                htmlButtons.inline += editorToolbarButton(button)\n                break\n            case 'edit':\n                htmlButtons.edit += editorToolbarButton(button)\n                break\n            case 'custom':\n                htmlButtons.custom += editorToolbarButton(button)\n                break\n        }\n    })\n    return htmlButtons\n}\n\nconst editor = function(buttons,preferences){\n    const buttonsHTML = editorToolbar(buttons)\n    let html = []\n    if ( buttonsHTML.block ){\n        html.push(`<div class=\"editor-toolbar-group block\" role=\"group\" aria-label=\"Block format buttons\">${buttonsHTML.block}</div>`)\n    }\n    if ( buttonsHTML.list ){\n        html.push(`<div class=\"editor-toolbar-group list\" role=\"group\" aria-label=\"List format buttons\">${buttonsHTML.list}</div>`)\n    }\n    if ( buttonsHTML.inline ){\n        html.push(`<div class=\"editor-toolbar-group inline\" role=\"group\" aria-label=\"Inline format buttons\">${buttonsHTML.inline}</div>`)\n    }\n    if ( buttonsHTML.edit ){\n        html.push(`<div class=\"editor-toolbar-group edit\" role=\"group\" aria-label=\"Edit buttons\">${buttonsHTML.edit}</div>`)\n    }\n    if ( buttonsHTML.custom ){\n        html.push(`<div class=\"editor-toolbar-group custom\" role=\"group\" aria-label=\"Custom buttons\">${buttonsHTML.custom}</div>`)\n    }\n    let classes = ''\n    if ( preferences.headingNumbers == 'on' ){\n        classes += 'heading-numbers'\n    }\n    return `\n        <div class=\"editor-container\">\n            <div class=\"editor-toolbar\">\n                ${html.join('<span class=\"editor-toolbar-group-separator\">|</span>')}\n            </div>\n            <div class=\"editor-body ${classes}\" contenteditable=\"true\">\n                ...\n            </div>\n        </div>`\n}\n\n//# sourceURL=webpack://AJE/./src/js/templates.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});